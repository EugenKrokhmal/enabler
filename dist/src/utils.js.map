{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;AAAA,oCAA2C,KAAU,EAAE,QAAgB;IACrE,IAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC;IAC/B,IAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;IAEhE,OAAO,UAAU,CAAC;AACpB,CAAC;AALD,gEAKC;AAED,4BAAmC,aAAqB;IACtD,OAAO,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC5C,CAAC;AAFD,gDAEC;AAED,gCAAuC,KAAU,EAAE,OAAe;IAChE,IAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,IAAM,KAAK,GAAG,GAAG,CAAC,UAAU,CAAC;IAC7B,IAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC,MAAM;QAC7B,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU;QAC5B,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC;IACrB,IAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IAEvC,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;SAC5B,GAAG,CAAC,UAAA,IAAI;QACP,IAAI,MAAM,CAAC;QACX,IAAM,aAAa,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAE/C,IAAI;YACF,MAAM,GAAG,IAAI,MAAM,CAAC,QAAM,aAAa,eAAU,EAAE,IAAI,CAAC,CAAC;SAC1D;QAAC,OAAO,EAAE,EAAE;YACX,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAChB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;SACnB;QACD,IAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAa,CAAC,CAAC;QAE1C,OAAO,OAAO,KAAK,IAAI,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9D,CAAC,CAAC;SACD,MAAM,CAAC,OAAO,CAAC,CAAC;AACrB,CAAC;AAxBD,wDAwBC;AAED,sBAA6B,KAAU,EAAE,KAAe;IACtD,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;IAEhC,OAAO,KAAK,CAAC,IAAI,CAAC,UAAC,IAAY,IAAK,OAAA,IAAI,IAAI,UAAU,EAAlB,CAAkB,CAAC,CAAC;AAC1D,CAAC;AAJD,oCAIC;AAED,sBAA6B,KAAU,EAAE,KAAe;IACtD,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAhB,CAAgB,CAAC,CAAC;IAE3D,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAC9D,CAAC;AAJD,oCAIC;AAED;IACE,OAAQ,MAAc,CAAC,SAAS,KAAK,SAAS,CAAC;AACjD,CAAC;AAFD,8BAEC;AAED;IACE,OAAQ,MAAc,CAAC,SAAS,KAAK,KAAK,CAAC;AAC7C,CAAC;AAFD,sBAEC;AAED;IACE,OAAQ,MAAc,CAAC,SAAS,CAAC;AACnC,CAAC;AAFD,4CAEC","sourcesContent":["export function getLineNumberByHTMLSegment($elem: any, template: string): number {\n  const start = $elem.startIndex;\n  const lineNumber = template.substr(0, start).split('\\n').length;\n\n  return lineNumber;\n}\n\nexport function _ecranizeForRegexp(strToEcranize: string): string {\n  return strToEcranize.replace(/-/g, '\\\\-');\n}\n\nexport function getDuplicateAttributes($elem: any, content: string) {\n  const dom = $elem.get(0);\n  const start = dom.startIndex;\n  const end = dom.children.length\n    ? dom.children[0].startIndex\n    : dom.endIndex + 1;\n  const html = content.slice(start, end);\n\n  return Object.keys(dom.attribs)\n    .map(attr => {\n      let regexp;\n      const attrForRegexp = _ecranizeForRegexp(attr);\n\n      try {\n        regexp = new RegExp(`\\\\s${attrForRegexp}=\"(.*?)\"`, 'gi');\n      } catch (ex) {\n        console.log(ex);\n        console.log(html);\n      }\n      const matched = html.match(regexp as any);\n\n      return matched !== null && matched.length > 1 ? attr : null;\n    })\n    .filter(Boolean);\n}\n\nexport function hasAttribute($elem: any, attrs: string[]): boolean {\n  const attributes = $elem.attr();\n\n  return attrs.some((attr: string) => attr in attributes);\n}\n\nexport function getAttrValue($elem: any, attrs: string[]): string {\n  const filledAttrs = attrs.filter(attr => $elem.attr(attr));\n\n  return filledAttrs.length ? $elem.attr(filledAttrs[0]) : '';\n}\n\nexport function isAngular(): boolean {\n  return (global as any).framework === 'angular';\n}\n\nexport function isVue(): boolean {\n  return (global as any).framework === 'vue';\n}\n\nexport function getFrameworkName(): string {\n  return (global as any).framework;\n}\n"]}