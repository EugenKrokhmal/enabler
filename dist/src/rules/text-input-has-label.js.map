{"version":3,"file":"text-input-has-label.js","sourceRoot":"","sources":["../../../src/rules/text-input-has-label.ts"],"names":[],"mappings":";;AAAA,0CAAqC;AACrC,kCAAwC;AAExC,2BAA0C,CAAM,EAAC,OAAe;IAC9D,OAAO,IAAI,mBAAS,CAAC;QACnB,SAAS,EAAE,CAAC;QACZ,OAAO,SAAA;QACP,SAAS,EAAE,oBAAoB;QAC/B,UAAU,EAAE,CAAC,IAAI,CAAC;QAClB,SAAS,EAAE,UAAC,KAAU,EAAE,KAAe;YACrC,IAAM,OAAO,GAAG,oBAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAE3C,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,KAAK,CAAC;aACd;YAED,IAAM,eAAe,GAAG,CAAC,CAAC,iBAAc,OAAO,QAAI,CAAC,CAAC;YAErD,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC;QACjC,CAAC;QACD,cAAc,EAAE,8CAA8C;KAC/D,CAAC,CAAC;AACL,CAAC;AAnBD,oCAmBC","sourcesContent":["import Validator from '../validator';\nimport { getAttrValue } from '../utils';\n\nexport default function textInputHasLabel($: any,content: string) {\n  return new Validator({\n    $template: $,\n    content,\n    selectors: 'input[type=\"text\"]',\n    assocAttrs: ['id'],\n    isInvalid: ($elem: any, attrs: string[]) => {\n      const inputId = getAttrValue($elem, attrs);\n\n      if (!inputId) {\n        return false;\n      }\n\n      const associatedLabel = $(`label[for=\"${inputId}\"]`);\n\n      return !associatedLabel.length;\n    },\n    warningMessage: 'Inputs with \"text\" type should have a label.'\n  });\n}\n"]}