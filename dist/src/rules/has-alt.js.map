{"version":3,"file":"has-alt.js","sourceRoot":"","sources":["../../../src/rules/has-alt.ts"],"names":[],"mappings":";;AAAA,kCAAwC;AACxC,0CAAqC;AAErC,gBAA+B,CAAM,EAAE,OAAe;IACpD,OAAO,IAAI,mBAAS,CAAC;QACnB,SAAS,EAAE,CAAC;QACZ,OAAO,SAAA;QACP,SAAS,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC;QAC1B,UAAU,EAAE,CAAC,KAAK,CAAC;QACnB,SAAS,EAAE,UAAC,KAAU,EAAE,KAAe;YACrC,OAAO,CAAC,oBAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACrC,CAAC;QACD,cAAc,EAAE,UAAC,EAAO;YACtB,IAAM,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC;YACxB,IAAM,OAAO,GAAG,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC;YACzD,IAAM,OAAO,GAAG,+BAA6B,OAAO,8CAAyC,OAAO,MAAG,CAAC;YAExG,OAAO,OAAO,CAAC;QACjB,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAjBD,yBAiBC","sourcesContent":["import { hasAttribute } from '../utils';\nimport Validator from '../validator';\n\nexport default function hasAlt($: any, content: string) {\n  return new Validator({\n    $template: $,\n    content,\n    selectors: ['img', 'area'],\n    assocAttrs: ['alt'],\n    isInvalid: ($elem: any, attrs: string[]) => {\n      return !hasAttribute($elem, attrs);\n    },\n    warningMessage: (el: any) => {\n      const tagName = el.name;\n      const purpose = tagName === 'img' ? 'image map' : 'link';\n      const message = `The alt attribute of the <${tagName} /> tag must state the purpose of the ${purpose}.`;\n\n      return message;\n    }\n  });\n}\n"]}