{"version":3,"file":"controls-form-wrapped.js","sourceRoot":"","sources":["../../../src/rules/controls-form-wrapped.ts"],"names":[],"mappings":";;AAAA,0CAAqC;AAErC,6BAA4C,CAAM,EAAC,OAAe;IAChE,OAAO,IAAI,mBAAS,CAAC;QACnB,SAAS,EAAE,CAAC;QACZ,OAAO,SAAA;QACP,SAAS,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC;QAC1C,SAAS,EAAE,UAAC,KAAU;YACpB,IAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;YAEzD,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC;QAC5B,CAAC;QACD,cAAc,EAAE,UAAC,EAAO;YACtB,IAAM,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC;YAExB,OAAO,MAAI,OAAO,kEAA6D,CAAC;QAClF,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAhBD,sCAgBC","sourcesContent":["import Validator from '../validator';\n\nexport default function controlsFormWrapped($: any,content: string) {\n  return new Validator({\n    $template: $,\n    content,\n    selectors: ['input', 'select', 'textarea'],\n    isInvalid: ($elem: any) => {\n      const parentForm = $elem.closest('form, div[role=form]');\n\n      return !parentForm.length;\n    },\n    warningMessage: (el: any) => {\n      const tagName = el.name;\n\n      return `<${tagName}> element should be wrapped in <form> or <div role=\"form\">.`;\n    }\n  });\n}\n"]}