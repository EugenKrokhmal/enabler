{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport { readFileSync } from 'fs';\n\nconst glob = require('glob');\n\nimport { printWarnings } from './logger';\nimport {\n  getA11yWarnings,\n  getContentFromVueFile,\n  getTemplateFromComponentDecorator\n} from './parser';\nimport { getFrameworkName } from './utils';\nimport { ProgramOptions } from './models';\n\nconst error = chalk.bold.red;\n\nconst templatesWithWarnings = Object.create(null);\n\nfunction linkWarningsWithTemplate(messages: any, templateUrl: string): void {\n  if (templateUrl in templatesWithWarnings) {\n    templatesWithWarnings[templateUrl] = templatesWithWarnings[\n      templateUrl\n    ].concat(messages);\n  } else {\n    templatesWithWarnings[templateUrl] = messages;\n  }\n}\n\nfunction getTemplate({ fileContent, isTSFile }: {fileContent: string; isTSFile: boolean;}): string {\n  switch (getFrameworkName()) {\n    case 'angular':\n      return isTSFile\n        ? getTemplateFromComponentDecorator(fileContent)\n        : fileContent;\n    case 'vue':\n      return getContentFromVueFile(fileContent);\n    default:\n      return fileContent;\n  }\n}\n\nfunction parseTemplate(templateUrl: string, options: ProgramOptions): void {\n  const isTSFile = templateUrl.endsWith('.ts');\n\n  let fileContent;\n\n  try {\n    fileContent = readFileSync(templateUrl, { encoding: 'utf8' });\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  const template = getTemplate({\n    isTSFile,\n    fileContent\n  });\n\n  const warnings = getA11yWarnings(template, options);\n\n  linkWarningsWithTemplate(warnings, templateUrl);\n}\n\nfunction handleTemplates(fileNames: string[], options: ProgramOptions): void {\n  fileNames.forEach(fileName => {\n    parseTemplate(fileName, options);\n  });\n\n  printWarnings(templatesWithWarnings);\n}\n\nfunction getExtensionPattern(): string {\n  const framework = getFrameworkName();\n\n  if (framework === 'vue') {\n    return 'vue';\n  } else if (framework === 'angular') {\n    return '+(html|ts)';\n  }\n\n  return 'html';\n}\n\nexport function run(program: any): void {\n  const { path, ng, vue } = program;\n  const options = { ng, vue };\n\n  if (!path) {\n    console.error(\n      error(\n        'Path is not specified. Use \"--path\" or \"-p\" options to specify a root folder.'\n      )\n    );\n    process.exit(0);\n  }\n\n  const extension = getExtensionPattern();\n\n  glob(`${path}/**/*.${extension}`, (err: Error, fileNames: string[]) => {\n    if (err) {\n      throw new Error(`Files search error ${err}`);\n    }\n\n    handleTemplates(fileNames, options);\n  });\n}\n"]}